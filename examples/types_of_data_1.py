"""
неизменяемые или mutuable
- это значит, что при изменении объекта создаётся новый объект в памяти, то есть по новому адресу в памяти
примеры:
- int
- float
- bool
- str (если к строке прибавят букву, то это будет создан новый объек в памяти, с новым адресом памяти)
- tuple(похож на listБ но изменить после создания нельзя)(tuple занимает меньше памяти и быстрее работает)
(нужно использовать вместо list когда надо защитить данные от изменения)
t = (1, 2, 3) 
у tuple есть два метода(так мало, потому что неизменяемый, вот у list больше, так как добавлять и проч. можно):
t.count(2) - выдаст сколько раз встречается 2 в кортеже
t.index(3) - выдаст индекс первого вхождения элемента
можно применить функцию и сделать из list сделать tuple t = tuple([1, 2, 3])
внутри кортежа могут быть изменяемые элементы
- frozenset (это неизменяемый вид set)
fs = ([1, 2, 3])
или fs = ((1, 2, 3)) или ещё как угодно
---------------
изменяемы
- это значит при попытке изменить создаётся новый объект с новым адресом в памяти
- list(list - это изменяемая коллекция элементов, упорядоченная по индексу. Она может хранить данные любого типа)
можно добавлять, изменять, удалять элементы
my_list = [1, "hello", 3.14, True]
есть методы .append() или .remove() или .sort()
- dict или словарь(изменяемая коллекция данных в виде пары ключ-значение. Ключём может быть только неизменяемые типы)
(ключи должны быть уникальны, порядок сохраняется)
чтобы создать словарь можно написать
my_dict = {"name": "Bob", "age": 25}
методы словаря:
.get(key, default) или .keys для всех ключей или .values для всех значений  
- set(это неупорядоченная коллекция уникальных элементов)
элементы не повторяются, порядок не сохраняется, работает быстро для поиска и операций множеств
создать вот так: b = set([1, 2, 3])
методы вот такие: .add(x) , .remove(x) , .discard(x) , .clear()
используется для мат операций над множествами 
поиск пересечений между списками
"""